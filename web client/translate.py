## translate.py
import sys, json, numpy as np
from textblob.blob import TextBlob
import requests

# Read data from stdin
def read_in():
    lines = sys.stdin.readlines()
    # Since our input would only be having one line, parse our JSON data from that
    return json.loads(lines[0])

def info(msg):
    print msg.encode('utf-8')
    print '<br>'

def main():
    # Get our data as an array: [title, author, date, content] from read_in()
    lines = read_in()
    title = lines[0]
    author = lines[1]
    date = lines[2]
    chinese_blob = TextBlob(lines[3])
    en_content = chinese_blob.translate(from_lang="zh-CN", to='en')
    info("Translated texts: " + str(en_content)) # print translated result to web console.

    # Combine translated result with ada-content-en.csv to produce new csv.
    # Make a call to localhost:5000/update with data: [(id),title,author,date,content], "id" field will be automatically generated by reviewing csv file.
    # please note that in dev environment, 8080 is node app port, while 5000 is python flask app port.
    r = requests.get("http://localhost:5000/update", headers={'X-API-TOKEN': 'FOOBAR1'}, data={'title': title, 'author': author, 'date': date, 'content': en_content})
    info("INFO: " + r.text)

    # training updated backup.csv.
    r_train = requests.get("http://localhost:5000/train", headers={'X-API-TOKEN': 'FOOBAR1'}, data={'data-url': 'backup.csv'})
    info("INFO: " + r_train.text)

    # predicting updated backup.csv.
    r_predict = requests.post("http://localhost:5000/predict", headers={'X-API-TOKEN': 'FOOBAR1'}, data={'item': '-1', 'num': 2, 'data-url': 'backup.csv'})
    info("INFO: " + r_predict.text)

    ### predicting part, data_url: "ada-content-en.csv"
    # item = request.data.get('item')
    # num_predictions = request.data.get('num', 10)
    # data_url = request.data.get('data-url', None)
    # if not item:
    #     return []
    # return content_engine.predict(str(item), num_predictions, data_url)
    

    ### training part
    # data_url = request.data.get('data-url', None)
    # content_engine.train(data_url)
    # return {"message": "Success!", "success": 1}


#start process
if __name__ == '__main__':
    main()